--- ogGraph.py	2021-10-26 23:30:47.762228804 -0700
+++ Graph.py	2021-10-26 23:34:03.735234337 -0700
@@ -1,48 +1,45 @@
 from collections import defaultdict
 class Graph:
-    node_weights = defaultdict(lambda : [])
-    number_of_nodes = 0
+    verticesfile = ""
+    edgesfile = ""
+    vertex_weights = defaultdict(lambda : [])
+    number_of_vertices = 0
     
-    def Graph(self):
-        self.node_weights = {}
-        self.number_of_nodes = 0
+    def __init__(self, vf="", ef=""):
+        self.verticesfile = vf
+        self.edgesfile = ef
+        self.vertex_weights = {}
+        self.number_of_vertices = 0
+        if (len(self.verticesfile) > 0 and len(self.edgesfile) > 0):
+            self.readInVertices()
+            self.readInWeights()
     
     def addVertex(self,x):
-        if x in self.node_weights:
+        if x in self.vertex_weights:
             return -1
         else:
-            self.node_weights[x] = []
-            self.number_of_nodes += 1
+            self.vertex_weights[x] = []
+            self.number_of_vertices += 1
 
     def addEdge(self,v1,v2,edge_weight):
-        self.node_weights[v1].append({v2:edge_weight})
+        self.vertex_weights[v1].append({v2:edge_weight})
             
     def print_graph(self):
-        for i in self.node_weights.items():
+        for i in self.vertex_weights.items():
             print(i)
             
-    def readInNodes(self):
-        nodes = [x.split(' ')[0] for x in open("test1.txt").readlines()]
-        for i in nodes:
-            self.addVertex(i)
+    def readInVertices(self):
+        vertices = [x.split(' ')[0] for x in open(self.verticesfile).readlines()]
+        for i in vertices:
+            self.addVertex(int(i))
+
     def readInWeights(self):
-        with open("test.txt") as file:
+        with open(self.edgesfile) as file:
             for line in file:
                 line = line.split(" ")
-                starting_node = line[1]
-                # print(starting_node)
-                end_node = line[2]
-                # print(end_node)
-                weight_between = line[3]
-                weight_between = weight_between[:-1]
-                # print(weight_between)
-                self.addEdge(starting_node,end_node,weight_between)
-        # print(self.node_weights)
-
-
-        
-x = Graph()      
-x.readInNodes()
-x.readInWeights()
-x.print_graph()
+                starting_vertex = int(line[1])
+                end_vertex = int(line[2])
+                weight_between = float(line[3])
+                self.addEdge(starting_vertex,end_vertex,weight_between)
+        # print(self.vertex_weights)
 
